name: ARM_Starter CI/CD

on:
  push:
    branches:
      - master
  workflow_dispatch:

  
jobs:
  build:
    runs-on: ubuntu-latest
    
    environment: my-env
    env:
      ARM_VPS1_API_KEY: ${{ secrets.ARM_VPS1_API_KEY }}
      PWD_MARIADB: ${{ secrets.PWD_MARIADB }}
      PWD_MONGODB: ${{ secrets.PWD_MONGODB }}
      SERVER_VPS1_IP: ${{ secrets.SERVER_VPS1_IP }}
      USER_MARIADB: ${{ secrets.USER_MARIADB }}
      USER_MONGODB: ${{ secrets.USER_MONGODB }}


    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Run containers
        run: bash run/build.sh

  tests:
    runs-on: ubuntu-latest

    environment: my-env
    env:
      ARM_VPS1_API_KEY: ${{ secrets.ARM_VPS1_API_KEY }}
      PWD_MARIADB: ${{ secrets.PWD_MARIADB }}
      PWD_MONGODB: ${{ secrets.PWD_MONGODB }}
      SERVER_VPS1_IP: ${{ secrets.SERVER_VPS1_IP }}
      USER_MARIADB: ${{ secrets.USER_MARIADB }}
      USER_MONGODB: ${{ secrets.USER_MONGODB }}
      SSH_PRIVATE_KEY_VPS1: ${{ secrets.SSH_PRIVATE_KEY_VPS1 }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: info
      run: pwd && ls

    - name: create volume 
      run: cd .. && mkdir -p volumes/mariadb/init

    - name: private key copy
      run: mkdir ~/.ssh && echo "$SSH_PRIVATE_KEY_VPS1" > ~/.ssh/id_test && sudo chmod 600 ~/.ssh/id_test

    - name: retrieve init.db
      run: cd .. && scp -i ~/.ssh/id_test -o StrictHostKeyChecking=no debian@$SERVER_VPS1_IP:/home/debian/ARMarket/volumes/mariadb/init/* ./volumes/mariadb/init/


    - name: https test
      run: pip install --upgrade certifi
      
    - name: init test plateform
      run: bash run/tests.sh

    - name: Run tests
      run: |
        echo "--0" && docker exec mariadb ls /var/lib/mysql/ARMarket && echo "--1" && docker exec mariadb ls /docker-entrypoint-initdb.d && echo "--2" && docker exec mariadb ls /var/lib/mysql && echo "--3" &&  sudo ls /var/lib/mysql && docker exec tests pytest


  deploy:
    needs: tests
    runs-on: ubuntu-latest

    environment: my-env
    env:
      ARM_VPS1_API_KEY: ${{ secrets.ARM_VPS1_API_KEY }}
      PWD_MARIADB: ${{ secrets.PWD_MARIADB }}
      PWD_MONGODB: ${{ secrets.PWD_MONGODB }}
      SERVER_VPS1_IP: ${{ secrets.SERVER_VPS1_IP }}
      USER_MARIADB: ${{ secrets.USER_MARIADB }}
      USER_MONGODB: ${{ secrets.USER_MONGODB }}
      SSH_PRIVATE_KEY_VPS1: ${{ secrets.SSH_PRIVATE_KEY_VPS1 }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: info
      run: pwd && ls && echo "----" && printenv

    - name: private key copy
      run: mkdir ~/.ssh && echo "$SSH_PRIVATE_KEY_VPS1" > ~/.ssh/id_test && sudo chmod 600 ~/.ssh/id_test

    - name: rm all active container
      run: ssh -i ~/.ssh/id_test -o StrictHostKeyChecking=no debian@$SERVER_VPS1_IP "if ["$(docker ps -aq)"]; then docker ps -a -q | xargs docker rm -f; fi"

    - name: Copy mariadb files
      run: sudo rm -f /home/debian/ARMarket/ARM_Starter/Mariadb/ && scp -i ~/.ssh/id_test ./Mariadb/docker-compose.yml debian@$SERVER_VPS1_IP:/home/debian/ARMarket/ARM_Starter/Mariadb/docker-compose.yml

    - name: Copy mongodb files
      run: sudo rm -f /home/debian/ARMarket/ARM_Starter/Mongodb/ && scp -i ~/.ssh/id_test ./Mongodb/docker-compose.yml debian@$SERVER_VPS1_IP:/home/debian/ARMarket/ARM_Starter/Mongodb/docker-compose.yml

    - name: Copy traefik files
      run: sudo rm -f /home/debian/ARMarket/ARM_Starter/Traefik/ && scp -i ~/.ssh/id_test -r ./Traefik/* debian@$SERVER_VPS1_IP:/home/debian/ARMarket/ARM_Starter/Traefik/

    - name: Copy autorun file
      run: scp -i ~/.ssh/id_test ./run/build.sh debian@$SERVER_VPS1_IP:/home/debian/ARMarket/ARM_Starter/build.sh
        

    - name: run containers
      run: |
        ssh -i ~/.ssh/id_test -o StrictHostKeyChecking=no debian@$SERVER_VPS1_IP "export ARM_VPS1_API_KEY=$ARM_VPS1_API_KEY \
        && export PWD_MARIADB=$PWD_MARIADB \
        && export PWD_MONGODB=$PWD_MONGODB \
        && export SERVER_VPS1_IP=$SERVER_VPS1_IP \
        && export USER_MARIADB=$USER_MARIADB \
        && export USER_MONGODB=$USER_MONGODB \
        && cd /home/debian/ARMarket/ARM_Starter/ \
        && bash build.sh"